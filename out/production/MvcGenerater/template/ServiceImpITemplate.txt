package $basepackage.service.$funcPackage;


import $basepackage.dao.$mapperpackage.$DomainDtoMapper;
import $basepackage.domain.$mapperpackage.$DomainDto;
import $basepackage.domain.$mapperpackage.$DomainDtoExample;

import com.itl.core.KingkooException;
import com.itl.service.dto.DomainCheckType;
import org.apache.ibatis.session.RowBounds;
import com.itl.core.StringUtils;
import com.itl.service.dto.PageListDto;
import com.itl.api.dto.manage.user.UserDto;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

/**
 * @author $author
 * @date $date.
 */
@Service
@Transactional(rollbackFor = Exception.class)
public class $DomainDtoServiceImpl implements $DomainDtoService {
    @Autowired
    private $DomainDtoMapper $domainDtoMapper;

    @Override
    public $DomainDto selectByPrimaryKey(Object object) {
        return $domainDtoMapper.selectByPrimaryKey(Long.parseLong(object.toString()));
    }

    @Override
    public void checkDomain(DomainCheckType checkType, $DomainDto dto) throws KingkooException {
        //必须写检查方法
    }

    @Override
    public $DomainDto insert($DomainDto $domainDto) throws KingkooException {
        checkDomain(DomainCheckType.Insert, $domainDto);
        $domainDtoMapper.insert($domainDto);
        return $domainDto;
    }

    @Override
    public int updateByPrimaryKey($DomainDto $domainDto) throws KingkooException {
        checkDomain(DomainCheckType.Update,$domainDto);
        return $domainDtoMapper.updateByPrimaryKeySelective($domainDto);
    }

    @Override
    public int deleteByPrimaryKey(Object t, UserDto userDto) {
        return $domainDtoMapper.deleteByPrimaryKey(Long.parseLong(t.toString()));
    }

    @Override
    public <ExampleDto> ExampleDto getExampleByDto($DomainDto dto) {
        $DomainDtoExample example = new $DomainDtoExample();
        $DomainDtoExample.Criteria criteria = example.createCriteria();
        /*************
         需要自己写自定义
         *************/
        return (ExampleDto) example;
    }

    @Override
    public PageListDto<$DomainDto> selectByExampleWithRowbounds($DomainDto dto, RowBounds bounds) {
        $DomainDtoExample example = getExampleByDto(dto);
        int count = $domainDtoMapper.countByExample(example);
        List<$DomainDto> list = new ArrayList<$DomainDto>();
        if (count > 0) {
            list = $domainDtoMapper.selectByExampleWithRowbounds(example, bounds);
        }
        PageListDto<$DomainDto> pageListDto = new PageListDto<$DomainDto>();
        pageListDto.setRows(list);
        pageListDto.setTotal(count);
        return pageListDto;
    }

    @Override
    public PageListDto<$DomainDto> selectByExampleWithRowbounds($DomainDto dto, RowBounds bounds, String orderByClause) {
        $DomainDtoExample example = getExampleByDto(dto);
        int count = $domainDtoMapper.countByExample(example);
        if (StringUtils.hasText(orderByClause)) {
            example.setOrderByClause(orderByClause);
        }
        List<$DomainDto> list = new ArrayList<$DomainDto>();
        if (count > 0) {
            list = $domainDtoMapper.selectByExampleWithRowbounds(example, bounds);
        }
        PageListDto<$DomainDto> pageListDto = new PageListDto<$DomainDto>();
        pageListDto.setRows(list);
        pageListDto.setTotal(count);
        return pageListDto;
    }

    @Override
    public List<$DomainDto> selectByExample($DomainDto dto) {
        $DomainDtoExample example = getExampleByDto(dto);
        return $domainDtoMapper.selectByExample(example);
    }

    @Override
    public List<$DomainDto> selectByExample($DomainDto dto, String orderByClause) {
        $DomainDtoExample example = getExampleByDto(dto);
        if (StringUtils.hasText(orderByClause)) {
            example.setOrderByClause(orderByClause);
        }
        return $domainDtoMapper.selectByExample(example);
    }
}

